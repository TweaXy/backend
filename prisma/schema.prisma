// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  username          String    @unique
  name              String    @db.VarChar(50)
  bio               String?   @db.VarChar(160)
  email             String    @unique
  phone             String    @db.VarChar(11)
  password          String    @db.VarChar(65)
  cover             Bytes?
  avatar            Bytes?
  joinedDate        DateTime  @default(now())
  birthdayDate      DateTime  @db.Date
  location          String?   @db.VarChar(30)
  passwordResetcode String?
  // restTokenExpirationDate  DateTime  @default(now())
  website           String?   @db.VarChar(100)

  tokens  Tokens[]
  tweetes Tweets[]
  likes   Likes[]

  //UserFollows relation
  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")

  //Blocks relation
  blockedUsers  User[] @relation("Blocks")
  blockingUsers User[] @relation("Blocks")

  //Mutes relation
  mutedUsers  User[] @relation("Mutes")
  mutingUsers User[] @relation("Mutes")
}

/// hold all emails that are not verified yet with their verified tokens
model EmailVerificationToken {
  email     String   @id
  token     String   
  lastUpdatedAt DateTime @default(now()) @updatedAt() /// hold the time when the user can resend the email verification
}

model Tokens {
  userID String
  token  String @unique
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, token])
}

model Tweets {
  tweetID String  @id @unique @default(cuid())
  userID  String
  text    String
  //media
  likes   Likes[]
  user    User    @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Likes {
  tweetID String
  userID  String
  user    User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweet   Tweets @relation(fields: [tweetID], references: [tweetID], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, tweetID])
}


