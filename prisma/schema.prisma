// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum InteractionsType {
  TWEET
  COMMENT
  RETWEET
}
model User {

  id                       String          @id @default(cuid())
  username                 String          @unique
  name                     String          @db.VarChar(50)
  bio                      String?         @db.VarChar(160)
  email                    String          @unique
  phone                    String?         @unique @db.VarChar(11)
  password                 String          @db.VarChar(65)
  cover                    String?         @db.VarChar(50)
  avatar                   String?         @db.VarChar(50)
  joinedDate               DateTime        @default(now())
  deletedDate              DateTime?
  birthdayDate             DateTime        @db.Date
  location                 String?         @db.VarChar(30)
  ResetToken               String?
  ResetTokenCreatedAt      DateTime?
  // restTokenExpirationDate  DateTime  @default(now())
  website                  String?         @db.VarChar(100)
  //relations
  ///chat
  conversationsFromMe      Conversations[] @relation("User1")
  conversationstoMe        Conversations[] @relation("User2")
  ///interaction
  interactions             Interactions[]
  likes                    Likes[]
  mentions                 Mentions[]
  views                    Views[]
  //UserFollows relation
  followedBy               Follow[]        @relation("Following")
  following                Follow[]        @relation("Follower")
  //Blocks relation
  blockedBy                Blocks[]        @relation("Blocked")
  blocking                 Blocks[]        @relation("Blocking")
  //Mutes relation
  mutedBy                  Mutes[]         @relation("Muted")
  muting                   Mutes[]         @relation("Muting")
  notificationsTOMe        Notifications[] @relation("notified")
  notificationsFromMe      Notifications[] @relation("notify")


  @@index([id])
  @@index([username])
  @@index([name])
  @@index([email])
}

model Mutes {
  userID       String
  mutingUserID String
  user         User   @relation("Muting", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mutingUser   User   @relation("Muted", fields: [mutingUserID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, mutingUserID])
  @@index([userID])
  @@index([mutingUserID])
}

model Blocks {
  userID         String
  blockingUserID String
  user           User   @relation("Blocking", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockingUser   User   @relation("Blocked", fields: [blockingUserID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, blockingUserID])
  @@index([userID])
  @@index([blockingUserID])
}

model Follow {
  userID          String
  followingUserID String
  user            User   @relation("Follower", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingUser   User   @relation("Following", fields: [followingUserID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, followingUserID])
  @@index([userID])
  @@index([followingUserID])
}

/// hold all emails that are not verified yet with their verified tokens
model EmailVerificationToken {
  email         String   @id
  token         String
  lastUpdatedAt DateTime @default(now()) @updatedAt() /// hold the time when the user can resend the email verification
}

model BlockedTokens {
  token         String @id @unique @db.VarChar(255)
  expiredDate   DateTime
}

model Trends {
  id           String               @id @default(cuid())
  text         String               @unique
  deletedDate   DateTime?
  interactions TrendsInteractions[]
}

model Interactions {
  id                   String               @id                       @default(cuid())
  type                 InteractionsType     @default(TWEET)   
  text                 String               @unique
  createdDate          DateTime             @unique(sort: Desc) @default(now())
  deletedDate          DateTime?
  media                Media[]
  parentInteractionID  String?
  parentInteraction    Interactions?        @relation("chain", fields: [parentInteractionID], references: [id])
  childrenInteractions Interactions[]       @relation("chain")
  userID               String
  user                 User                 @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes                Likes[]
  mentions             Mentions[]
  views                Views[]
  trends               TrendsInteractions[]
  notifications        Notifications[]
}

model TrendsInteractions {
  trendID       String
  interactionID String
  trend         Trends       @relation(fields: [trendID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  interaction   Interactions @relation(fields: [interactionID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([trendID, interactionID])
}

model Media {
  fileName         String          @id
  interactionsID   String
  Interactions     Interactions?   @relation(fields: [interactionsID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  DirectMessages   DirectMessages? @relation(fields: [directMessagesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  directMessagesId String?
}

model Conversations {
  ///message go from user1 to user2
  id             String           @id           @default(cuid())
  user1ID        String
  user2ID        String
  user1          User             @relation("User1", fields: [user1ID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2          User             @relation("User2", fields: [user2ID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  DirectMessages DirectMessages[]
}

model DirectMessages {
  id             String        @id              @default(cuid())
  conversationID String
  conversation   Conversations @relation(fields: [conversationID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text           String
  media          Media[]
  seen           Boolean       @default(false)
  createdDate    DateTime      @default(now())
  deletedDate    DateTime?
  // sender
}

model Notifications {
  id            String        @id               @default(cuid())
  createdDate   DateTime      @default(now())
  action        String
  seen          Boolean       @default(false)
  userID        String
  interactionID String?
  fromUserID    String?
  user          User          @relation("notified", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fromUser      User?         @relation("notify", fields: [fromUserID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  interaction   Interactions? @relation(fields: [interactionID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Likes {
  interactionID String
  userID        String
  user          User         @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  interaction   Interactions @relation(fields: [interactionID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, interactionID])
}

model Mentions {
  interactionID String
  userID        String
  user          User         @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  interaction   Interactions @relation(fields: [interactionID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, interactionID])
}

model Views {
  interactionID String
  userID        String
  user          User         @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  interaction   Interactions @relation(fields: [interactionID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userID, interactionID])
}
